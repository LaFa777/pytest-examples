"""
–ü—Ä–∏–º–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Factory Boy
"""
# stdlib
import random

# thirdparty
import pytest

# project
from src import fixtures
from src.tables import Basket, BasketItem, User  # noqa
from src.utils.sqlalchemy import get_session

# –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞–¥–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
pytestmark = pytest.mark.usefixtures("app_create", "setup_factories")


def test_create_user_with_factory(sqlalchemy_session):
    # —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª—É—á–∞–π–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    # –∏ –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏—è–µ–º –µ–≥–æ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    user = fixtures.UserFactory(username="–•–∞—Å–±–∏–∫")

    # –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—Å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ
    user_db = sqlalchemy_session.query(User).first()
    assert user == user_db
    assert user_db.username == user.username

    # –∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ–Ω—è –Ω–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞–¥–∏–º –µ—â–µ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    # –í –±–∞–∑–µ —Ä—ã–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ
    new_sqlalchemy_session = get_session()
    users = new_sqlalchemy_session.query(User).all()
    assert not users


def test_build_user_without_save(sqlalchemy_session, user_factory):
    # —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É
    narko_user = user_factory.build(username="–í–æ–ª—Ç–µ—Ä –£–∞–π—Ç")
    assert isinstance(narko_user, User)
    assert narko_user.username == "–í–æ–ª—Ç–µ—Ä –£–∞–π—Ç"

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–∞—è
    users = sqlalchemy_session.query(User).all()
    assert not users
    # –≤–∞—É! –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! –æ–Ω–∞ –ø—É—Å—Ç–∞—è!!! :O
    #

    #
    # —Ö–º, –Ω–µ, —è –ø–µ—Ä–µ–¥—É–º–∞–ª. –î–∞–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –±–∞–∑—É
    sqlalchemy_session.add(narko_user)

    # –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –Ω–µ –ø–æ—è–≤—è—Ç—Å—è, –ø–æ–∫–∞ –º—ã –Ω–µ –∑–∞–∫–æ–º–º–∏—Ç–∏–º –∏–ª–∏ –Ω–µ —Å–±—Ä–æ—Å–∏–º –±—É—Ñ–µ—Ä –≤ –±–∞–∑—É
    # sqlalchemy_session.commit() <- –ù–ï –í–ï–†–ù–û!!!
    sqlalchemy_session.flush()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ —á—Ç–æ —Ç–æ –ø–æ—è–≤–∏–ª–æ—Å—å
    users = sqlalchemy_session.query(User).all()
    assert users
    # –≤–∞—É! –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! –æ–Ω–∞ –ù–ï –ø—É—Å—Ç–∞—è!!! :)


def test_create_user_with_save(sqlalchemy_session, user_factory):
    # —Å–æ–∑–¥–∞–¥–∏–º –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ
    yet_another_narko_user = user_factory.create(username="–î–∂–µ—Å—Å–∏ –ü–∏–Ω–∫–º–∞–Ω")

    # –≤—Ä–æ–¥–µ –±—ã, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –±–∞–∑–µ (—è –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –≤ –¥–æ–∫–µ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ —Ç–∞–∫)
    users = sqlalchemy_session.query(User).all()
    # —ç—Ç–æ—Ç —Ç–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, —Ç–∞–∫ —á—Ç–æ —è –¥—É–º–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω
    assert len(users) == 1
    jeccy = users[0]
    assert jeccy == yet_another_narko_user


def test_create_user(sqlalchemy_session, user):
    """
    :param user: —ç–∫–∑–µ–º–ø–ª—è—Ä tables.User, —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤ –±–∞–∑–µ (–±–µ–∑ –∫–æ–º–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    """
    # –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–º–∞–Ω—É–ª–æ? —ç—Ç–æ —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    assert isinstance(user, User)

    # —Ö–º. –ò –≤ –±–∞–∑–µ —á—Ç–æ –ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å?
    user_db = sqlalchemy_session.query(User).first()
    assert user_db == user


def test_create_user_with_custom_name(sqlalchemy_session, user_factory):
    # –ø—Ä–æ—Å—Ç–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ .create()
    user = user_factory(username="–ß–∏–º—Å")

    # –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫–∂–µ
    user_db = sqlalchemy_session.query(User).first()
    assert user_db.username == user.username


def test_create_basket(sqlalchemy_session, basket, user):
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É. (—Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É)
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–∞–∑–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–∞—Å—å –∫–æ—Ä–∑–∏–Ω–∞
    basket_db = sqlalchemy_session.query(Basket).first()
    assert basket_db == basket

    # —Ç–∞–∫ —Å—Ç–æ–ø—ç, –∫–æ—Ä–∑–∏–Ω—É –∂–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∫—Ç–æ —Ç–æ?
    # —Ç–∞–∫ –æ–Ω —É –Ω–∞—Å —Å–≤—è–∑–∞–Ω —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å—Ç—É—Ä—É :)
    assert basket_db.user == user


def test_create_basket_item_as_bulba(sqlalchemy_session):
    # —Ç–∞–∫, —Å–æ–∑–¥–∞–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ!
    item = fixtures.BasketItemFactory(name="–ë—É–ª—å–±–∞ free", price=1.5)

    basket_item_db = sqlalchemy_session.query(BasketItem).first()
    # —É –Ω–∞—à–µ–π –∫–∞—Ä—Ç–æ—à–µ—á–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–Ω–∞!
    assert basket_item_db.price == item.price


def test_create_user_with_factory_trait(sqlalchemy_session):
    # –∞ –≤–æ—Ç —Ç—É—Ç –Ω–∞–º –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞–º –¥–∞–Ω–Ω—ã–º–∏.
    # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –æ—Å–æ–±–æ –Ω—É–∂–Ω–æ... —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä :(
    muscled_doge = fixtures.UserFactory(doge=True)
    assert muscled_doge.username == "–ö–∞—á–æ–∫ –¥–æ–≥–µ"

    user_db = sqlalchemy_session.query(User).first()
    assert muscled_doge == user_db


def test_create_multiple_baskets_with_one_user(
    sqlalchemy_session, user_factory, basket_factory, basket_item_factory
):
    # —á—Ç–æ-—Ç–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –±–∞–∑—É –Ω–∞–≥—Ä—É–∂–∞—Ç—å. –ü–æ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –±–∞–∑—É.
    rich_chel = user_factory.build(username="–ë–æ–≥–∞—Ç—ã–π —á–µ–ª üòé –æ—á–µ–Ω—å –±–æ–≥–∞—Ç—ã–π üí¥ üí¥ üí¥")

    for _ in range(10):
        # –∞ —Ç—É—Ç —è –∑–∞—Ö–æ—Ç–µ–ª —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
        rich_basket = basket_factory.create(user=rich_chel)
        # –≤ –∫–∞–∂–¥–æ–π –∫–æ—Ä–∑–∏–Ω–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ (–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å)
        for _ in range(random.randint(0, 10)):
            basket_item_factory(basket=rich_basket)

    baskets = sqlalchemy_session.query(Basket).all()
    assert len(baskets) == 10
